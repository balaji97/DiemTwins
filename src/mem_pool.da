from logger_util import LOGGER

class MemPool:

    def __init__(self, twin_id, pacemaker, n_rounds):
        self.twin_id = twin_id
        self.pacemaker = pacemaker
        self.n_rounds = n_rounds

    # todo re-transmit in case pruned from block-tree
    def get_transactions(self):
        LOGGER.log('MemPool: get_transactions', None)

        txn = dict()

        if self.pacemaker.current_round <= self.n_rounds:
            # Send a unique transaction for each proposal. To ensure uniqueness in each round, it is twin_id_round
            command = self.twin_id + "_" + str(self.pacemaker.current_round)
        elif self.pacemaker.current_round == self.n_rounds + 1:
            # In round n_rounds + 1, send a no-op that will be committed for our liveness check
            command = 'no-op'
        else:
            # Round is after n_rounds + 1. Send empty txns to commit the no-op block.
            return []

        txn['command'] = command
        txn['req_id'] = command

        LOGGER.log('MemPool: get_transactions: returns', [txn])
        return [txn]
