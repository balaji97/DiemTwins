from logger_util import LOGGER
from threading import Lock

class MemPool:

    def __init__(self, validator_id, pacemaker):
        self.pacemaker = pacemaker
        self.lock = Lock()
        self.transaction_ctr = 0

    # todo re-transmit in case pruned from block-tree
    def get_transactions(self, twin_id):
        LOGGER.log('MemPool: get_transactions', None)

        with self.lock:
            txn = dict()
            txn['command'] = twin_id + "_" + str(self.transaction_ctr) + "_" + str(self.pacemaker.current_round)
            txn['req_id'] = twin_id + "_" + str(self.transaction_ctr) + "_" + str(self.pacemaker.current_round)

            send_txns = [txn]
            self.transaction_ctr += 1

        LOGGER.log('MemPool: get_transactions: returns', send_txns)
        return send_txns
