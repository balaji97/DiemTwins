import json
import os
import shutil
from filecmp import cmp
import time

from object_types import TestCase, LeaderPartition, Partition, TestReport

from cryptography import Cryptography
from validator_twins import ValidatorTwins

from generator_models import JsonObject


class TestExecutor(process):
    def setup(test_case, test_id):
        self.n_rounds = test_case.n_rounds
        self.n_validators = test_case.n_validators
        self.n_faulty = (self.n_validators - 1)//3
        self.delta = test_case.delta

    def run():
        start_time = time.time()

        private_keys_validators = []
        public_keys_validators = []

        os.makedirs('../logs/config' + str(test_id))
        os.makedirs('../ledgers/config' + str(test_id))

        for validator_id in range(self.n_validators):
            private_key, public_key = Cryptography.generate_key()
            private_keys_validators.append(private_key)
            public_keys_validators.append(public_key)

        for validator_id in range(self.n_validators):
            if validator_id not in test_case.twin_ids:
                default_leader = validator_id
                break

        validator_config = {
            "config_id": test_id,
            "nrounds": self.n_rounds,
            "nvalidators": self.n_validators,
            "nfaulty": self.n_faulty,
            "delta": self.delta,
            "leaders": [leader_partition.leader for leader_partition in test_case.leader_partitions],
            "default_leader": default_leader
        }

        validator_map = dict()

        for validator_id in range(self.n_validators):
            # Create a validator and add to validator_map. If its not a twin, its twin_id is simply the validator_id
            validator = new(ValidatorTwins, num=1)
            twin_id = str(validator_id)
            validator_map[twin_id] = validator

            if validator_id in test_case.twin_ids:
                # Create the twin validator process and also add it to the validator map
                validator = new(ValidatorTwins, num=1)
                twin_id = str(validator_id) + "_twin"
                validator_map[twin_id] = validator

        all_validators = set()
        for twin_id, validator in validator_map.items():
            validator_id = int(twin_id[0])
            setup(
                validator,
                (validator_config, validator_id, private_keys_validators[validator_id],
                 public_keys_validators, twin_id, test_case, validator_map))
            all_validators = all_validators.union(validator)

        start(all_validators)

        await(each(v in all_validators, has=received(('Done',), from_=v)))
        output("All validators done.")

        twin_ids = [twin_id for twin_id in validator_map]

        # todo write to file? only write failed testcases?
        output("Test report: ")
        output(TestReport(self.test_id, check_safety(twin_ids), check_liveness(twin_ids), time.time() - start_time))

    # todo should we check all lines or mismatching lines?
    def check_safety(twin_ids):
        ledger_directory = '../ledgers/config' + str(self.test_id) + '/'

        for twin_id_a in twin_ids:
            for twin_id_b in twin_ids:
                ledger_a = ledger_directory + 'validator_' + twin_id_a + '.ledger'
                ledger_b = ledger_directory + 'validator_' + twin_id_b + '.ledger'

                if not cmp(ledger_a, ledger_b):
                    return False

        return True

    def check_liveness(twin_ids):
        ledger_directory = '../ledgers/config' + str(self.test_id) + '/'

        for twin_id in twin_ids:
            ledger = ledger_directory + 'validator_' + twin_id + '.ledger'
            last_ledger_line = ""

            with open(ledger, 'r') as f:
                for line in f.readlines():
                    last_ledger_line = line

            if last_ledger_line != 'no-op\n':
                return False

        return True


def main():

    if os.path.exists('../logs/') and os.path.isdir('../logs/'):
        shutil.rmtree('../logs/')

    if os.path.exists('../ledgers/') and os.path.isdir('../ledgers/'):
        shutil.rmtree('../ledgers/')

    # todo we will later read this from a file
    with open("testcases_batch_99.jsonl", "r") as test_file:
        json_string = test_file.readline()

    json_obj: JsonObject = json.loads(json_string, object_hook=JsonObject.object_decoder)

    test_cases = [
        TestCase(
            n_rounds= json_obj.n_rounds,
            n_validators=json_obj.n_validators,
            leader_partitions=[LeaderPartition(round_leader_partition) for round_leader_partition in json_obj.round_leader_partitions],
            twin_ids=json_obj.twin_ids,
            delta=0.1
        )
    ]

    for test_id, test_case in enumerate(test_cases):
        p = new(TestExecutor)
        setup(p, (test_case, test_id))
        start(p)
