import os
import shutil

from object_types import TestCase, LeaderPartition, Partition

from cryptography import Cryptography
from validator_twins import ValidatorTwins

class TestExecutor(process):
    def setup(test_case, test_id):
        self.n_rounds = test_case.n_rounds
        self.n_validators = test_case.n_validators
        self.n_faulty = (self.n_validators - 1)//3
        self.delta = test_case.delta

    def run():

        private_keys_validators = []
        public_keys_validators = []

        os.makedirs('../logs/config' + str(test_id))
        os.makedirs('../ledgers/config' + str(test_id))

        for validator_id in range(self.n_validators):
            private_key, public_key = Cryptography.generate_key()
            private_keys_validators.append(private_key)
            public_keys_validators.append(public_key)

        for validator_id in range(self.n_validators):
            if validator_id not in test_case.twin_ids:
                default_leader = validator_id
                break

        validator_config = {
            "config_id": test_id,
            "nrounds": self.n_rounds,
            "nvalidators": self.n_validators,
            "nfaulty": self.n_faulty,
            "delta": self.delta,
            "leaders": [leader_partition.leader for leader_partition in test_case.leader_partitions],
            "default_leader": default_leader
        }

        validator_map = dict()

        for validator_id in range(self.n_validators):
            # Create a validator and add to validator_map. If its not a twin, its twin_id is simply the validator_id
            validator = new(ValidatorTwins, num=1)
            twin_id = str(validator_id)
            validator_map[twin_id] = validator

            if validator_id in test_case.twin_ids:
                # Create the twin validator process and also add it to the validator map
                validator = new(ValidatorTwins, num=1)
                twin_id = str(validator_id) + "_twin"
                validator_map[twin_id] = validator

        all_validators = set()
        for twin_id, validator in validator_map.items():
            validator_id = int(twin_id[0])
            setup(
                validator,
                (validator_config, validator_id, private_keys_validators[validator_id],
                 public_keys_validators, twin_id, test_case, validator_map))
            all_validators = all_validators.union(validator)

        start(all_validators)

        await(each(v in all_validators, has=received(('Done',), from_=v)))
        output("All validators done.")



def main():

    if os.path.exists('../logs/') and os.path.isdir('../logs/'):
        shutil.rmtree('../logs/')

    if os.path.exists('../ledgers/') and os.path.isdir('../ledgers/'):
        shutil.rmtree('../ledgers/')

    # todo we will later read this from a file
    test_cases = [
        TestCase(
            n_rounds= 10,
            n_validators=4,
            leader_partitions=[
                LeaderPartition(1, [Partition([], ['0', '0_twin']), Partition([], ['1', '2', '3'])]),
                LeaderPartition(1, [Partition([], ['0', '0_twin']), Partition([], ['1', '2', '3'])]),
                LeaderPartition(2, [Partition([], ['0', '0_twin', '1', '2']), Partition([], ['3'])]),
                LeaderPartition(1, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
                LeaderPartition(1, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
                LeaderPartition(1, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
                LeaderPartition(2, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
                LeaderPartition(2, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
                LeaderPartition(3, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
                LeaderPartition(3, [Partition([], ['0', '0_twin', '1', '2', '3'])]),
            ],
            twin_ids=[0]
        )
    ]

    for test_id, test_case in enumerate(test_cases):
        p = new(TestExecutor)
        setup(p, (test_case, test_id))
        start(p)
